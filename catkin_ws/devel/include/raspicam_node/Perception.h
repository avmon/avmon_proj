// Generated by gencpp from file raspicam_node/Perception.msg
// DO NOT EDIT!


#ifndef RASPICAM_NODE_MESSAGE_PERCEPTION_H
#define RASPICAM_NODE_MESSAGE_PERCEPTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>

namespace raspicam_node
{
template <class ContainerAllocator>
struct Perception_
{
  typedef Perception_<ContainerAllocator> Type;

  Perception_()
    : header()
    , steering_error(0.0)
    , variable2(0.0)
    , variable3(0.0)
    , at_intersection(false)
    , direction(false)
    , signal4(false)
    , signal5(false)
    , undistorted_img()
    , bev_img()
    , mainlane_img()
    , parking_img()
    , tram_img()
    , background_img()
    , img7()
    , img8()  {
    }
  Perception_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , steering_error(0.0)
    , variable2(0.0)
    , variable3(0.0)
    , at_intersection(false)
    , direction(false)
    , signal4(false)
    , signal5(false)
    , undistorted_img(_alloc)
    , bev_img(_alloc)
    , mainlane_img(_alloc)
    , parking_img(_alloc)
    , tram_img(_alloc)
    , background_img(_alloc)
    , img7(_alloc)
    , img8(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _steering_error_type;
  _steering_error_type steering_error;

   typedef double _variable2_type;
  _variable2_type variable2;

   typedef double _variable3_type;
  _variable3_type variable3;

   typedef uint8_t _at_intersection_type;
  _at_intersection_type at_intersection;

   typedef uint8_t _direction_type;
  _direction_type direction;

   typedef uint8_t _signal4_type;
  _signal4_type signal4;

   typedef uint8_t _signal5_type;
  _signal5_type signal5;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _undistorted_img_type;
  _undistorted_img_type undistorted_img;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _bev_img_type;
  _bev_img_type bev_img;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _mainlane_img_type;
  _mainlane_img_type mainlane_img;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _parking_img_type;
  _parking_img_type parking_img;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _tram_img_type;
  _tram_img_type tram_img;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _background_img_type;
  _background_img_type background_img;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _img7_type;
  _img7_type img7;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _img8_type;
  _img8_type img8;





  typedef boost::shared_ptr< ::raspicam_node::Perception_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raspicam_node::Perception_<ContainerAllocator> const> ConstPtr;

}; // struct Perception_

typedef ::raspicam_node::Perception_<std::allocator<void> > Perception;

typedef boost::shared_ptr< ::raspicam_node::Perception > PerceptionPtr;
typedef boost::shared_ptr< ::raspicam_node::Perception const> PerceptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raspicam_node::Perception_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raspicam_node::Perception_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace raspicam_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'raspicam_node': ['/home/corvin/catkin_ws/src/raspicam_node/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::raspicam_node::Perception_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspicam_node::Perception_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspicam_node::Perception_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspicam_node::Perception_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspicam_node::Perception_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspicam_node::Perception_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raspicam_node::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b77d34b81a12b4e3196798b595588f33";
  }

  static const char* value(const ::raspicam_node::Perception_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb77d34b81a12b4e3ULL;
  static const uint64_t static_value2 = 0x196798b595588f33ULL;
};

template<class ContainerAllocator>
struct DataType< ::raspicam_node::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raspicam_node/Perception";
  }

  static const char* value(const ::raspicam_node::Perception_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raspicam_node::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message header\n\
Header header\n\
\n\
\n\
# Numerical variables\n\
float64 steering_error    # The steering angle error for lane keeping\n\
float64 variable2         # ---\n\
float64 variable3\n\
\n\
\n\
# Bool signals \n\
bool at_intersection      # at the center of an intersection (#-shape)\n\
bool direction            # detected direction on the traffic sign (#-shape)\n\
bool signal4\n\
bool signal5\n\
\n\
\n\
# IMG msg \n\
sensor_msgs/CompressedImage undistorted_img\n\
sensor_msgs/CompressedImage bev_img                # The bird's eye view image\n\
sensor_msgs/CompressedImage mainlane_img\n\
sensor_msgs/CompressedImage parking_img\n\
sensor_msgs/CompressedImage tram_img\n\
sensor_msgs/CompressedImage background_img\n\
sensor_msgs/CompressedImage img7\n\
sensor_msgs/CompressedImage img8\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/CompressedImage\n\
# This message contains a compressed image\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of camera\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
\n\
string format        # Specifies the format of the data\n\
                     #   Acceptable values:\n\
                     #     jpeg, png\n\
uint8[] data         # Compressed image buffer\n\
";
  }

  static const char* value(const ::raspicam_node::Perception_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raspicam_node::Perception_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.steering_error);
      stream.next(m.variable2);
      stream.next(m.variable3);
      stream.next(m.at_intersection);
      stream.next(m.direction);
      stream.next(m.signal4);
      stream.next(m.signal5);
      stream.next(m.undistorted_img);
      stream.next(m.bev_img);
      stream.next(m.mainlane_img);
      stream.next(m.parking_img);
      stream.next(m.tram_img);
      stream.next(m.background_img);
      stream.next(m.img7);
      stream.next(m.img8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Perception_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raspicam_node::Perception_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raspicam_node::Perception_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "steering_error: ";
    Printer<double>::stream(s, indent + "  ", v.steering_error);
    s << indent << "variable2: ";
    Printer<double>::stream(s, indent + "  ", v.variable2);
    s << indent << "variable3: ";
    Printer<double>::stream(s, indent + "  ", v.variable3);
    s << indent << "at_intersection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.at_intersection);
    s << indent << "direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction);
    s << indent << "signal4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signal4);
    s << indent << "signal5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signal5);
    s << indent << "undistorted_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.undistorted_img);
    s << indent << "bev_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.bev_img);
    s << indent << "mainlane_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.mainlane_img);
    s << indent << "parking_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.parking_img);
    s << indent << "tram_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.tram_img);
    s << indent << "background_img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.background_img);
    s << indent << "img7: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.img7);
    s << indent << "img8: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.img8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RASPICAM_NODE_MESSAGE_PERCEPTION_H
