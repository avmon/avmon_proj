// Generated by gencpp from file raspicam_node/Perception_var.msg
// DO NOT EDIT!


#ifndef RASPICAM_NODE_MESSAGE_PERCEPTION_VAR_H
#define RASPICAM_NODE_MESSAGE_PERCEPTION_VAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace raspicam_node
{
template <class ContainerAllocator>
struct Perception_var_
{
  typedef Perception_var_<ContainerAllocator> Type;

  Perception_var_()
    : header()
    , steering_error(0.0)
    , d2intersection(0.0)
    , fvar3(0.0)
    , urban_direction(0)
    , at_tram(false)
    , stop_turning_flag(false)
    , var2(false)
    , var3(false)  {
    }
  Perception_var_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , steering_error(0.0)
    , d2intersection(0.0)
    , fvar3(0.0)
    , urban_direction(0)
    , at_tram(false)
    , stop_turning_flag(false)
    , var2(false)
    , var3(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _steering_error_type;
  _steering_error_type steering_error;

   typedef double _d2intersection_type;
  _d2intersection_type d2intersection;

   typedef double _fvar3_type;
  _fvar3_type fvar3;

   typedef int8_t _urban_direction_type;
  _urban_direction_type urban_direction;

   typedef uint8_t _at_tram_type;
  _at_tram_type at_tram;

   typedef uint8_t _stop_turning_flag_type;
  _stop_turning_flag_type stop_turning_flag;

   typedef uint8_t _var2_type;
  _var2_type var2;

   typedef uint8_t _var3_type;
  _var3_type var3;





  typedef boost::shared_ptr< ::raspicam_node::Perception_var_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raspicam_node::Perception_var_<ContainerAllocator> const> ConstPtr;

}; // struct Perception_var_

typedef ::raspicam_node::Perception_var_<std::allocator<void> > Perception_var;

typedef boost::shared_ptr< ::raspicam_node::Perception_var > Perception_varPtr;
typedef boost::shared_ptr< ::raspicam_node::Perception_var const> Perception_varConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raspicam_node::Perception_var_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raspicam_node::Perception_var_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace raspicam_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'raspicam_node': ['/home/corvin/catkin_ws/src/raspicam_node/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::raspicam_node::Perception_var_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspicam_node::Perception_var_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspicam_node::Perception_var_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspicam_node::Perception_var_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspicam_node::Perception_var_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspicam_node::Perception_var_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raspicam_node::Perception_var_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de246360e784cb56f3a2ea4a5ddb7187";
  }

  static const char* value(const ::raspicam_node::Perception_var_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde246360e784cb56ULL;
  static const uint64_t static_value2 = 0xf3a2ea4a5ddb7187ULL;
};

template<class ContainerAllocator>
struct DataType< ::raspicam_node::Perception_var_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raspicam_node/Perception_var";
  }

  static const char* value(const ::raspicam_node::Perception_var_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raspicam_node::Perception_var_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message header\n\
# This message is for all the outputs of perception algorithms\n\
Header header\n\
\n\
\n\
# Numerical variables\n\
float64 steering_error       # The steering angle error for lane keeping\n\
float64 d2intersection\n\
float64 fvar3\n\
\n\
int8 urban_direction           # -1:left, 0:straight, 1:right\n\
\n\
\n\
# Bool signals \n\
bool at_tram\n\
bool stop_turning_flag\n\
bool var2\n\
bool var3\n\
      \n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::raspicam_node::Perception_var_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raspicam_node::Perception_var_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.steering_error);
      stream.next(m.d2intersection);
      stream.next(m.fvar3);
      stream.next(m.urban_direction);
      stream.next(m.at_tram);
      stream.next(m.stop_turning_flag);
      stream.next(m.var2);
      stream.next(m.var3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Perception_var_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raspicam_node::Perception_var_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raspicam_node::Perception_var_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "steering_error: ";
    Printer<double>::stream(s, indent + "  ", v.steering_error);
    s << indent << "d2intersection: ";
    Printer<double>::stream(s, indent + "  ", v.d2intersection);
    s << indent << "fvar3: ";
    Printer<double>::stream(s, indent + "  ", v.fvar3);
    s << indent << "urban_direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.urban_direction);
    s << indent << "at_tram: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.at_tram);
    s << indent << "stop_turning_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_turning_flag);
    s << indent << "var2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.var2);
    s << indent << "var3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.var3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RASPICAM_NODE_MESSAGE_PERCEPTION_VAR_H
