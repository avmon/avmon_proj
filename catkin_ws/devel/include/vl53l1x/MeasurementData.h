// Generated by gencpp from file vl53l1x/MeasurementData.msg
// DO NOT EDIT!


#ifndef VL53L1X_MESSAGE_MEASUREMENTDATA_H
#define VL53L1X_MESSAGE_MEASUREMENTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace vl53l1x
{
template <class ContainerAllocator>
struct MeasurementData_
{
  typedef MeasurementData_<ContainerAllocator> Type;

  MeasurementData_()
    : header()
    , signal(0.0)
    , ambient(0.0)
    , effective_spad(0)
    , sigma(0.0)
    , status(0)  {
    }
  MeasurementData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , signal(0.0)
    , ambient(0.0)
    , effective_spad(0)
    , sigma(0.0)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _signal_type;
  _signal_type signal;

   typedef double _ambient_type;
  _ambient_type ambient;

   typedef uint8_t _effective_spad_type;
  _effective_spad_type effective_spad;

   typedef double _sigma_type;
  _sigma_type sigma;

   typedef uint8_t _status_type;
  _status_type status;



  enum {
    STATUS_RANGE_VALID = 0u,
    STATUS_SIGMA_FAIL = 1u,
    STATUS_SIGNAL_FAIL = 2u,
    STATUS_RANGE_VALID_MIN_RANGE_CLIPPED = 3u,
    STATUS_OUTOFBOUNDS_FAIL = 4u,
    STATUS_HARDWARE_FAIL = 5u,
    STATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL = 6u,
    STATUS_WRAP_TARGET_FAIL = 7u,
    STATUS_PROCESSING_FAIL = 8u,
    STATUS_XTALK_SIGNAL_FAIL = 9u,
    STATUS_SYNCRONISATION_INT = 10u,
    STATUS_RANGE_VALID_MERGED_PULSE = 11u,
    STATUS_TARGET_PRESENT_LACK_OF_SIGNAL = 12u,
    STATUS_MIN_RANGE_FAIL = 13u,
    STATUS_RANGE_INVALID = 14u,
    STATUS_NONE = 255u,
  };


  typedef boost::shared_ptr< ::vl53l1x::MeasurementData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vl53l1x::MeasurementData_<ContainerAllocator> const> ConstPtr;

}; // struct MeasurementData_

typedef ::vl53l1x::MeasurementData_<std::allocator<void> > MeasurementData;

typedef boost::shared_ptr< ::vl53l1x::MeasurementData > MeasurementDataPtr;
typedef boost::shared_ptr< ::vl53l1x::MeasurementData const> MeasurementDataConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vl53l1x::MeasurementData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vl53l1x::MeasurementData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vl53l1x

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vl53l1x': ['/home/corvin/catkin_ws/src/vl53l1x_ros/vl53l1x/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vl53l1x::MeasurementData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vl53l1x::MeasurementData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vl53l1x::MeasurementData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vl53l1x::MeasurementData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vl53l1x::MeasurementData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vl53l1x::MeasurementData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vl53l1x::MeasurementData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36897d720215b87a4d4722de6ad95b13";
  }

  static const char* value(const ::vl53l1x::MeasurementData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36897d720215b87aULL;
  static const uint64_t static_value2 = 0x4d4722de6ad95b13ULL;
};

template<class ContainerAllocator>
struct DataType< ::vl53l1x::MeasurementData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vl53l1x/MeasurementData";
  }

  static const char* value(const ::vl53l1x::MeasurementData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vl53l1x::MeasurementData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
# Some of the fields of resulting RangingMeasurementData structure.\n\
\n\
float64 signal # return signal rate in MegaCount per second (MCPS)\n\
float64 ambient # return ambient rate in MegaCount per second (MCPS)\n\
uint8 effective_spad # effective SPAD count for the current ranging\n\
float64 sigma # estimation of the standard deviation of the current ranging, m\n\
uint8 status # status for the current measurement, a value of 0 means the ranging is valid\n\
\n\
# Status field meanings:\n\
\n\
uint8 STATUS_RANGE_VALID = 0 # The Range is valid\n\
uint8 STATUS_SIGMA_FAIL = 1 # Sigma Fail\n\
uint8 STATUS_SIGNAL_FAIL = 2 # Signal fail\n\
uint8 STATUS_RANGE_VALID_MIN_RANGE_CLIPPED = 3 # Target is below minimum detection threshold\n\
uint8 STATUS_OUTOFBOUNDS_FAIL = 4 # Phase out of valid limits - different to a wrap exit\n\
uint8 STATUS_HARDWARE_FAIL = 5 # Hardware fail\n\
uint8 STATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL = 6 # The Range is valid but the wraparound check has not been done\n\
uint8 STATUS_WRAP_TARGET_FAIL = 7 # Wrapped target - no matching phase in other VCSEL period timing\n\
uint8 STATUS_PROCESSING_FAIL = 8 # Internal algo underflow or overflow in lite ranging\n\
uint8 STATUS_XTALK_SIGNAL_FAIL = 9 # Specific to lite ranging\n\
uint8 STATUS_SYNCRONISATION_INT = 10 # 1st interrupt when starting ranging in back to back mode. Ignore data\n\
uint8 STATUS_RANGE_VALID_MERGED_PULSE = 11 # All Range ok but object is result of multiple pulses merging together. Used by RQL for merged pulse detection\n\
uint8 STATUS_TARGET_PRESENT_LACK_OF_SIGNAL = 12 # Used by RQL as different to phase fail\n\
uint8 STATUS_MIN_RANGE_FAIL = 13 # User ROI input is not valid e.g. beyond SPAD Array\n\
uint8 STATUS_RANGE_INVALID = 14 # lld returned valid range but negative value\n\
uint8 STATUS_NONE = 255 # No Update\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::vl53l1x::MeasurementData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vl53l1x::MeasurementData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.signal);
      stream.next(m.ambient);
      stream.next(m.effective_spad);
      stream.next(m.sigma);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MeasurementData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vl53l1x::MeasurementData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vl53l1x::MeasurementData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "signal: ";
    Printer<double>::stream(s, indent + "  ", v.signal);
    s << indent << "ambient: ";
    Printer<double>::stream(s, indent + "  ", v.ambient);
    s << indent << "effective_spad: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.effective_spad);
    s << indent << "sigma: ";
    Printer<double>::stream(s, indent + "  ", v.sigma);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VL53L1X_MESSAGE_MEASUREMENTDATA_H
