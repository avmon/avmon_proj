# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from raspicam_node/Perception.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import std_msgs.msg

class Perception(genpy.Message):
  _md5sum = "b77d34b81a12b4e3196798b595588f33"
  _type = "raspicam_node/Perception"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message header
Header header


# Numerical variables
float64 steering_error    # The steering angle error for lane keeping
float64 variable2         # ---
float64 variable3


# Bool signals 
bool at_intersection      # at the center of an intersection (#-shape)
bool direction            # detected direction on the traffic sign (#-shape)
bool signal4
bool signal5


# IMG msg 
sensor_msgs/CompressedImage undistorted_img
sensor_msgs/CompressedImage bev_img                # The bird's eye view image
sensor_msgs/CompressedImage mainlane_img
sensor_msgs/CompressedImage parking_img
sensor_msgs/CompressedImage tram_img
sensor_msgs/CompressedImage background_img
sensor_msgs/CompressedImage img7
sensor_msgs/CompressedImage img8

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/CompressedImage
# This message contains a compressed image

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image

string format        # Specifies the format of the data
                     #   Acceptable values:
                     #     jpeg, png
uint8[] data         # Compressed image buffer
"""
  __slots__ = ['header','steering_error','variable2','variable3','at_intersection','direction','signal4','signal5','undistorted_img','bev_img','mainlane_img','parking_img','tram_img','background_img','img7','img8']
  _slot_types = ['std_msgs/Header','float64','float64','float64','bool','bool','bool','bool','sensor_msgs/CompressedImage','sensor_msgs/CompressedImage','sensor_msgs/CompressedImage','sensor_msgs/CompressedImage','sensor_msgs/CompressedImage','sensor_msgs/CompressedImage','sensor_msgs/CompressedImage','sensor_msgs/CompressedImage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,steering_error,variable2,variable3,at_intersection,direction,signal4,signal5,undistorted_img,bev_img,mainlane_img,parking_img,tram_img,background_img,img7,img8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Perception, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steering_error is None:
        self.steering_error = 0.
      if self.variable2 is None:
        self.variable2 = 0.
      if self.variable3 is None:
        self.variable3 = 0.
      if self.at_intersection is None:
        self.at_intersection = False
      if self.direction is None:
        self.direction = False
      if self.signal4 is None:
        self.signal4 = False
      if self.signal5 is None:
        self.signal5 = False
      if self.undistorted_img is None:
        self.undistorted_img = sensor_msgs.msg.CompressedImage()
      if self.bev_img is None:
        self.bev_img = sensor_msgs.msg.CompressedImage()
      if self.mainlane_img is None:
        self.mainlane_img = sensor_msgs.msg.CompressedImage()
      if self.parking_img is None:
        self.parking_img = sensor_msgs.msg.CompressedImage()
      if self.tram_img is None:
        self.tram_img = sensor_msgs.msg.CompressedImage()
      if self.background_img is None:
        self.background_img = sensor_msgs.msg.CompressedImage()
      if self.img7 is None:
        self.img7 = sensor_msgs.msg.CompressedImage()
      if self.img8 is None:
        self.img8 = sensor_msgs.msg.CompressedImage()
    else:
      self.header = std_msgs.msg.Header()
      self.steering_error = 0.
      self.variable2 = 0.
      self.variable3 = 0.
      self.at_intersection = False
      self.direction = False
      self.signal4 = False
      self.signal5 = False
      self.undistorted_img = sensor_msgs.msg.CompressedImage()
      self.bev_img = sensor_msgs.msg.CompressedImage()
      self.mainlane_img = sensor_msgs.msg.CompressedImage()
      self.parking_img = sensor_msgs.msg.CompressedImage()
      self.tram_img = sensor_msgs.msg.CompressedImage()
      self.background_img = sensor_msgs.msg.CompressedImage()
      self.img7 = sensor_msgs.msg.CompressedImage()
      self.img8 = sensor_msgs.msg.CompressedImage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d4B3I().pack(_x.steering_error, _x.variable2, _x.variable3, _x.at_intersection, _x.direction, _x.signal4, _x.signal5, _x.undistorted_img.header.seq, _x.undistorted_img.header.stamp.secs, _x.undistorted_img.header.stamp.nsecs))
      _x = self.undistorted_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.undistorted_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.undistorted_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.bev_img.header.seq, _x.bev_img.header.stamp.secs, _x.bev_img.header.stamp.nsecs))
      _x = self.bev_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.bev_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.bev_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.mainlane_img.header.seq, _x.mainlane_img.header.stamp.secs, _x.mainlane_img.header.stamp.nsecs))
      _x = self.mainlane_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mainlane_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mainlane_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.parking_img.header.seq, _x.parking_img.header.stamp.secs, _x.parking_img.header.stamp.nsecs))
      _x = self.parking_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parking_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parking_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.tram_img.header.seq, _x.tram_img.header.stamp.secs, _x.tram_img.header.stamp.nsecs))
      _x = self.tram_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tram_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tram_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.background_img.header.seq, _x.background_img.header.stamp.secs, _x.background_img.header.stamp.nsecs))
      _x = self.background_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.background_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.background_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.img7.header.seq, _x.img7.header.stamp.secs, _x.img7.header.stamp.nsecs))
      _x = self.img7.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img7.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img7.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.img8.header.seq, _x.img8.header.stamp.secs, _x.img8.header.stamp.nsecs))
      _x = self.img8.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img8.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img8.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.undistorted_img is None:
        self.undistorted_img = sensor_msgs.msg.CompressedImage()
      if self.bev_img is None:
        self.bev_img = sensor_msgs.msg.CompressedImage()
      if self.mainlane_img is None:
        self.mainlane_img = sensor_msgs.msg.CompressedImage()
      if self.parking_img is None:
        self.parking_img = sensor_msgs.msg.CompressedImage()
      if self.tram_img is None:
        self.tram_img = sensor_msgs.msg.CompressedImage()
      if self.background_img is None:
        self.background_img = sensor_msgs.msg.CompressedImage()
      if self.img7 is None:
        self.img7 = sensor_msgs.msg.CompressedImage()
      if self.img8 is None:
        self.img8 = sensor_msgs.msg.CompressedImage()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.steering_error, _x.variable2, _x.variable3, _x.at_intersection, _x.direction, _x.signal4, _x.signal5, _x.undistorted_img.header.seq, _x.undistorted_img.header.stamp.secs, _x.undistorted_img.header.stamp.nsecs,) = _get_struct_3d4B3I().unpack(str[start:end])
      self.at_intersection = bool(self.at_intersection)
      self.direction = bool(self.direction)
      self.signal4 = bool(self.signal4)
      self.signal5 = bool(self.signal5)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.undistorted_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.undistorted_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.undistorted_img.format = str[start:end].decode('utf-8')
      else:
        self.undistorted_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.undistorted_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.bev_img.header.seq, _x.bev_img.header.stamp.secs, _x.bev_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bev_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.bev_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bev_img.format = str[start:end].decode('utf-8')
      else:
        self.bev_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.bev_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.mainlane_img.header.seq, _x.mainlane_img.header.stamp.secs, _x.mainlane_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mainlane_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.mainlane_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mainlane_img.format = str[start:end].decode('utf-8')
      else:
        self.mainlane_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.mainlane_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.parking_img.header.seq, _x.parking_img.header.stamp.secs, _x.parking_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parking_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.parking_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parking_img.format = str[start:end].decode('utf-8')
      else:
        self.parking_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.parking_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.tram_img.header.seq, _x.tram_img.header.stamp.secs, _x.tram_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tram_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.tram_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tram_img.format = str[start:end].decode('utf-8')
      else:
        self.tram_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.tram_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.background_img.header.seq, _x.background_img.header.stamp.secs, _x.background_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.background_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.background_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.background_img.format = str[start:end].decode('utf-8')
      else:
        self.background_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.background_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.img7.header.seq, _x.img7.header.stamp.secs, _x.img7.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img7.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.img7.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img7.format = str[start:end].decode('utf-8')
      else:
        self.img7.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.img7.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.img8.header.seq, _x.img8.header.stamp.secs, _x.img8.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img8.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.img8.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img8.format = str[start:end].decode('utf-8')
      else:
        self.img8.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.img8.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d4B3I().pack(_x.steering_error, _x.variable2, _x.variable3, _x.at_intersection, _x.direction, _x.signal4, _x.signal5, _x.undistorted_img.header.seq, _x.undistorted_img.header.stamp.secs, _x.undistorted_img.header.stamp.nsecs))
      _x = self.undistorted_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.undistorted_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.undistorted_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.bev_img.header.seq, _x.bev_img.header.stamp.secs, _x.bev_img.header.stamp.nsecs))
      _x = self.bev_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.bev_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.bev_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.mainlane_img.header.seq, _x.mainlane_img.header.stamp.secs, _x.mainlane_img.header.stamp.nsecs))
      _x = self.mainlane_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mainlane_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mainlane_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.parking_img.header.seq, _x.parking_img.header.stamp.secs, _x.parking_img.header.stamp.nsecs))
      _x = self.parking_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parking_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parking_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.tram_img.header.seq, _x.tram_img.header.stamp.secs, _x.tram_img.header.stamp.nsecs))
      _x = self.tram_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tram_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tram_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.background_img.header.seq, _x.background_img.header.stamp.secs, _x.background_img.header.stamp.nsecs))
      _x = self.background_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.background_img.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.background_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.img7.header.seq, _x.img7.header.stamp.secs, _x.img7.header.stamp.nsecs))
      _x = self.img7.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img7.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img7.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.img8.header.seq, _x.img8.header.stamp.secs, _x.img8.header.stamp.nsecs))
      _x = self.img8.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img8.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img8.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.undistorted_img is None:
        self.undistorted_img = sensor_msgs.msg.CompressedImage()
      if self.bev_img is None:
        self.bev_img = sensor_msgs.msg.CompressedImage()
      if self.mainlane_img is None:
        self.mainlane_img = sensor_msgs.msg.CompressedImage()
      if self.parking_img is None:
        self.parking_img = sensor_msgs.msg.CompressedImage()
      if self.tram_img is None:
        self.tram_img = sensor_msgs.msg.CompressedImage()
      if self.background_img is None:
        self.background_img = sensor_msgs.msg.CompressedImage()
      if self.img7 is None:
        self.img7 = sensor_msgs.msg.CompressedImage()
      if self.img8 is None:
        self.img8 = sensor_msgs.msg.CompressedImage()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.steering_error, _x.variable2, _x.variable3, _x.at_intersection, _x.direction, _x.signal4, _x.signal5, _x.undistorted_img.header.seq, _x.undistorted_img.header.stamp.secs, _x.undistorted_img.header.stamp.nsecs,) = _get_struct_3d4B3I().unpack(str[start:end])
      self.at_intersection = bool(self.at_intersection)
      self.direction = bool(self.direction)
      self.signal4 = bool(self.signal4)
      self.signal5 = bool(self.signal5)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.undistorted_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.undistorted_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.undistorted_img.format = str[start:end].decode('utf-8')
      else:
        self.undistorted_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.undistorted_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.bev_img.header.seq, _x.bev_img.header.stamp.secs, _x.bev_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bev_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.bev_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bev_img.format = str[start:end].decode('utf-8')
      else:
        self.bev_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.bev_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.mainlane_img.header.seq, _x.mainlane_img.header.stamp.secs, _x.mainlane_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mainlane_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.mainlane_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mainlane_img.format = str[start:end].decode('utf-8')
      else:
        self.mainlane_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.mainlane_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.parking_img.header.seq, _x.parking_img.header.stamp.secs, _x.parking_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parking_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.parking_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parking_img.format = str[start:end].decode('utf-8')
      else:
        self.parking_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.parking_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.tram_img.header.seq, _x.tram_img.header.stamp.secs, _x.tram_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tram_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.tram_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tram_img.format = str[start:end].decode('utf-8')
      else:
        self.tram_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.tram_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.background_img.header.seq, _x.background_img.header.stamp.secs, _x.background_img.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.background_img.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.background_img.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.background_img.format = str[start:end].decode('utf-8')
      else:
        self.background_img.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.background_img.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.img7.header.seq, _x.img7.header.stamp.secs, _x.img7.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img7.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.img7.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img7.format = str[start:end].decode('utf-8')
      else:
        self.img7.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.img7.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.img8.header.seq, _x.img8.header.stamp.secs, _x.img8.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img8.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.img8.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img8.format = str[start:end].decode('utf-8')
      else:
        self.img8.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.img8.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d4B3I = None
def _get_struct_3d4B3I():
    global _struct_3d4B3I
    if _struct_3d4B3I is None:
        _struct_3d4B3I = struct.Struct("<3d4B3I")
    return _struct_3d4B3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
