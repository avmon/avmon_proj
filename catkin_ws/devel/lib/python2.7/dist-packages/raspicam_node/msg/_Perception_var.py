# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from raspicam_node/Perception_var.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Perception_var(genpy.Message):
  _md5sum = "de246360e784cb56f3a2ea4a5ddb7187"
  _type = "raspicam_node/Perception_var"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message header
# This message is for all the outputs of perception algorithms
Header header


# Numerical variables
float64 steering_error       # The steering angle error for lane keeping
float64 d2intersection
float64 fvar3

int8 urban_direction           # -1:left, 0:straight, 1:right


# Bool signals 
bool at_tram
bool stop_turning_flag
bool var2
bool var3
      
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','steering_error','d2intersection','fvar3','urban_direction','at_tram','stop_turning_flag','var2','var3']
  _slot_types = ['std_msgs/Header','float64','float64','float64','int8','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,steering_error,d2intersection,fvar3,urban_direction,at_tram,stop_turning_flag,var2,var3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Perception_var, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steering_error is None:
        self.steering_error = 0.
      if self.d2intersection is None:
        self.d2intersection = 0.
      if self.fvar3 is None:
        self.fvar3 = 0.
      if self.urban_direction is None:
        self.urban_direction = 0
      if self.at_tram is None:
        self.at_tram = False
      if self.stop_turning_flag is None:
        self.stop_turning_flag = False
      if self.var2 is None:
        self.var2 = False
      if self.var3 is None:
        self.var3 = False
    else:
      self.header = std_msgs.msg.Header()
      self.steering_error = 0.
      self.d2intersection = 0.
      self.fvar3 = 0.
      self.urban_direction = 0
      self.at_tram = False
      self.stop_turning_flag = False
      self.var2 = False
      self.var3 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3db4B().pack(_x.steering_error, _x.d2intersection, _x.fvar3, _x.urban_direction, _x.at_tram, _x.stop_turning_flag, _x.var2, _x.var3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.steering_error, _x.d2intersection, _x.fvar3, _x.urban_direction, _x.at_tram, _x.stop_turning_flag, _x.var2, _x.var3,) = _get_struct_3db4B().unpack(str[start:end])
      self.at_tram = bool(self.at_tram)
      self.stop_turning_flag = bool(self.stop_turning_flag)
      self.var2 = bool(self.var2)
      self.var3 = bool(self.var3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3db4B().pack(_x.steering_error, _x.d2intersection, _x.fvar3, _x.urban_direction, _x.at_tram, _x.stop_turning_flag, _x.var2, _x.var3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.steering_error, _x.d2intersection, _x.fvar3, _x.urban_direction, _x.at_tram, _x.stop_turning_flag, _x.var2, _x.var3,) = _get_struct_3db4B().unpack(str[start:end])
      self.at_tram = bool(self.at_tram)
      self.stop_turning_flag = bool(self.stop_turning_flag)
      self.var2 = bool(self.var2)
      self.var3 = bool(self.var3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3db4B = None
def _get_struct_3db4B():
    global _struct_3db4B
    if _struct_3db4B is None:
        _struct_3db4B = struct.Struct("<3db4B")
    return _struct_3db4B
