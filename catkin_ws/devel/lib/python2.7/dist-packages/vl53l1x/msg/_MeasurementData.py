# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vl53l1x/MeasurementData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MeasurementData(genpy.Message):
  _md5sum = "36897d720215b87a4d4722de6ad95b13"
  _type = "vl53l1x/MeasurementData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# Some of the fields of resulting RangingMeasurementData structure.

float64 signal # return signal rate in MegaCount per second (MCPS)
float64 ambient # return ambient rate in MegaCount per second (MCPS)
uint8 effective_spad # effective SPAD count for the current ranging
float64 sigma # estimation of the standard deviation of the current ranging, m
uint8 status # status for the current measurement, a value of 0 means the ranging is valid

# Status field meanings:

uint8 STATUS_RANGE_VALID = 0 # The Range is valid
uint8 STATUS_SIGMA_FAIL = 1 # Sigma Fail
uint8 STATUS_SIGNAL_FAIL = 2 # Signal fail
uint8 STATUS_RANGE_VALID_MIN_RANGE_CLIPPED = 3 # Target is below minimum detection threshold
uint8 STATUS_OUTOFBOUNDS_FAIL = 4 # Phase out of valid limits - different to a wrap exit
uint8 STATUS_HARDWARE_FAIL = 5 # Hardware fail
uint8 STATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL = 6 # The Range is valid but the wraparound check has not been done
uint8 STATUS_WRAP_TARGET_FAIL = 7 # Wrapped target - no matching phase in other VCSEL period timing
uint8 STATUS_PROCESSING_FAIL = 8 # Internal algo underflow or overflow in lite ranging
uint8 STATUS_XTALK_SIGNAL_FAIL = 9 # Specific to lite ranging
uint8 STATUS_SYNCRONISATION_INT = 10 # 1st interrupt when starting ranging in back to back mode. Ignore data
uint8 STATUS_RANGE_VALID_MERGED_PULSE = 11 # All Range ok but object is result of multiple pulses merging together. Used by RQL for merged pulse detection
uint8 STATUS_TARGET_PRESENT_LACK_OF_SIGNAL = 12 # Used by RQL as different to phase fail
uint8 STATUS_MIN_RANGE_FAIL = 13 # User ROI input is not valid e.g. beyond SPAD Array
uint8 STATUS_RANGE_INVALID = 14 # lld returned valid range but negative value
uint8 STATUS_NONE = 255 # No Update

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  STATUS_RANGE_VALID = 0
  STATUS_SIGMA_FAIL = 1
  STATUS_SIGNAL_FAIL = 2
  STATUS_RANGE_VALID_MIN_RANGE_CLIPPED = 3
  STATUS_OUTOFBOUNDS_FAIL = 4
  STATUS_HARDWARE_FAIL = 5
  STATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL = 6
  STATUS_WRAP_TARGET_FAIL = 7
  STATUS_PROCESSING_FAIL = 8
  STATUS_XTALK_SIGNAL_FAIL = 9
  STATUS_SYNCRONISATION_INT = 10
  STATUS_RANGE_VALID_MERGED_PULSE = 11
  STATUS_TARGET_PRESENT_LACK_OF_SIGNAL = 12
  STATUS_MIN_RANGE_FAIL = 13
  STATUS_RANGE_INVALID = 14
  STATUS_NONE = 255

  __slots__ = ['header','signal','ambient','effective_spad','sigma','status']
  _slot_types = ['std_msgs/Header','float64','float64','uint8','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,signal,ambient,effective_spad,sigma,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MeasurementData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.signal is None:
        self.signal = 0.
      if self.ambient is None:
        self.ambient = 0.
      if self.effective_spad is None:
        self.effective_spad = 0
      if self.sigma is None:
        self.sigma = 0.
      if self.status is None:
        self.status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.signal = 0.
      self.ambient = 0.
      self.effective_spad = 0
      self.sigma = 0.
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2dBdB().pack(_x.signal, _x.ambient, _x.effective_spad, _x.sigma, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.signal, _x.ambient, _x.effective_spad, _x.sigma, _x.status,) = _get_struct_2dBdB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2dBdB().pack(_x.signal, _x.ambient, _x.effective_spad, _x.sigma, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.signal, _x.ambient, _x.effective_spad, _x.sigma, _x.status,) = _get_struct_2dBdB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2dBdB = None
def _get_struct_2dBdB():
    global _struct_2dBdB
    if _struct_2dBdB is None:
        _struct_2dBdB = struct.Struct("<2dBdB")
    return _struct_2dBdB
